// AuthAPI.ts - API cho x√°c th·ª±c ng∆∞·ªùi d√πng trong s·ªï tay ƒëi·ªán t·ª≠

import type { 
  LoginRequest, 
  RegisterRequest, 
  User, 
  AuthResponse, 
  UserResponse, 
  LogoutResponse 
} from '@/types/auth';
import { StorageUtils } from '@/utils/storage';
import { RoleUtils } from '@/utils/role';
import { ApiUtils, API_ENDPOINTS } from '@/utils/api';

class AuthAPI {
  /**
   * L·∫•y th√¥ng tin user t·ª´ localStorage
   */
  public getStoredUser(): User | null {
    return StorageUtils.getUser();
  }

  /**
   * L·∫•y t√™n vai tr√≤ t·ª´ m√£ s·ªë
   */
  public getRoleName(vai_tro: number): string {
    return RoleUtils.getRoleName(vai_tro);
  }

  /**
   * Ki·ªÉm tra vai tr√≤ c·ªßa user hi·ªán t·∫°i
   */
  public getCurrentUserRole(): string | null {
    const user = this.getStoredUser();
    return user ? this.getRoleName(user.vai_tro) : null;
  }

  /**
   * Ki·ªÉm tra user c√≥ ph·∫£i l√† admin kh√¥ng
   */
  public isAdmin(): boolean {
    return RoleUtils.isAdmin(this.getStoredUser());
  }

  /**
   * Ki·ªÉm tra user c√≥ ph·∫£i l√† h·ªçc sinh kh√¥ng
   */
  public isStudent(): boolean {
    return RoleUtils.isStudent(this.getStoredUser());
  }

  /**
   * Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
   */
  isAuthenticated(): boolean {
    return StorageUtils.hasToken();
  }

  /**
   * ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
   */
  async login(credentials: LoginRequest): Promise<AuthResponse> {
    try {
      const response = await fetch(ApiUtils.getFullURL(API_ENDPOINTS.AUTH.LOGIN), {
        method: 'POST',
        headers: ApiUtils.createHeaders(),
        body: JSON.stringify(credentials),
      });

      const data = await ApiUtils.handleResponse<AuthResponse>(response);
      
      console.log('üìã Login response data:', data);

      if (data.success && data.data?.token) {
        console.log('üîê Saving token:', data.data.token);
        console.log('üë§ Saving user:', data.data.admin);
        
        // L∆∞u token v√† th√¥ng tin user v√†o localStorage
        StorageUtils.setToken(data.data.token);
        StorageUtils.setUser(data.data.admin);
        
        // Verify token ƒë√£ ƒë∆∞·ª£c l∆∞u
        const savedToken = StorageUtils.getToken();
        console.log('‚úÖ Token saved successfully:', savedToken ? 'YES' : 'NO');
      } else {
        console.log('‚ùå Login failed or no token in response:', data);
      }

      return data;
    } catch (error) {
      console.log('üí• L·ªói trong AuthAPI.login:', error);
      return ApiUtils.handleError(error, 'L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  }

  /**
   * ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
   */
  async register(userData: RegisterRequest): Promise<AuthResponse> {
    try {
      const response = await fetch(ApiUtils.getFullURL(API_ENDPOINTS.AUTH.REGISTER), {
        method: 'POST',
        headers: ApiUtils.createHeaders(),
        body: JSON.stringify(userData),
      });

      const data = await ApiUtils.handleResponse<AuthResponse>(response);

      if (data.success && data.data.token) {
        // L∆∞u token v√† th√¥ng tin user v√†o localStorage
        StorageUtils.setToken(data.data.token);
        StorageUtils.setUser(data.data.admin);
      }

      return data;
    } catch (error) {
      return ApiUtils.handleError(error, 'L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  }

  /**
   * L·∫•y th√¥ng tin user hi·ªán t·∫°i
   */
  async getCurrentUser(): Promise<UserResponse> {
    try {
      const response = await fetch(ApiUtils.getFullURL(API_ENDPOINTS.AUTH.USER), {
        method: 'GET',
        headers: ApiUtils.createHeaders(true),
      });

      const data = await ApiUtils.handleResponse<UserResponse>(response);

      if (data.success) {
        // C·∫≠p nh·∫≠t th√¥ng tin user trong localStorage
        StorageUtils.setUser(data.data.admin);
      }

      return data;
    } catch (error) {
      return ApiUtils.handleError(error, 'L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  }

  /**
   * ƒêƒÉng xu·∫•t
   */
  async logout(): Promise<LogoutResponse> {
    try {
      const response = await fetch(ApiUtils.getFullURL(API_ENDPOINTS.AUTH.LOGOUT), {
        method: 'POST',
        headers: ApiUtils.createHeaders(true),
      });

      const data = await ApiUtils.handleResponse<LogoutResponse>(response);

      // X√≥a token v√† user kh·ªèi localStorage b·∫•t k·ªÉ k·∫øt qu·∫£ API
      StorageUtils.clearAuth();

      return data;
    } catch (error) {
      // V·∫´n x√≥a token local n·∫øu c√≥ l·ªói
      StorageUtils.clearAuth();
      return ApiUtils.handleError(error, 'L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  }



  /**
   * Truy c·∫≠p route ƒë∆∞·ª£c b·∫£o v·ªá (legacy endpoint)
   */
  async getProtectedUserData(): Promise<UserResponse> {
    try {
      const response = await fetch(ApiUtils.getFullURL(API_ENDPOINTS.USER), {
        method: 'GET',
        headers: ApiUtils.createHeaders(true),
      });

      const data = await ApiUtils.handleResponse<UserResponse>(response);
      return data;
    } catch (error) {
      return ApiUtils.handleError(error, 'L·ªói k·∫øt n·ªëi ƒë·∫øn server');
    }
  }

  /**
   * L√†m m·ªõi token (n·∫øu API h·ªó tr·ª£)
   */
  async refreshToken(): Promise<AuthResponse> {
    try {
      const response = await fetch(ApiUtils.getFullURL(API_ENDPOINTS.AUTH.REFRESH), {
        method: 'POST',
        headers: ApiUtils.createHeaders(true),
      });

      const data = await ApiUtils.handleResponse<AuthResponse>(response);

      if (data.success && data.data.token) {
        StorageUtils.setToken(data.data.token);
        StorageUtils.setUser(data.data.admin);
      }

      return data;
    } catch (error) {
      return ApiUtils.handleError(error, 'L·ªói l√†m m·ªõi token');
    }
  }
}

// Export singleton instance
const authAPI = new AuthAPI();
export default authAPI;

// Export types for use in components
export type { LoginRequest, RegisterRequest, User, AuthResponse, UserResponse, LogoutResponse };